// DataIngestion is the ingestion pipeline configuration
export class DataIngestion {
    constructor(inputURI, archiveURI, inputFilesExt, subNets, usageTimeWindowSec, sessionTimeWindowSec, schedule, defaultDeviceType, deviceCreationPolicy) {
        if (inputURI !== undefined) {
            this.inputURI = inputURI;
        }
        if (archiveURI !== undefined) {
            this.archiveURI = archiveURI;
        }
        if (inputFilesExt !== undefined) {
            this.inputFilesExt = inputFilesExt;
        }
        if (subNets !== undefined) {
            this.subNets = subNets;
        }
        if (usageTimeWindowSec !== undefined) {
            this.usageTimeWindowSec = usageTimeWindowSec;
        }
        if (sessionTimeWindowSec !== undefined) {
            this.sessionTimeWindowSec = sessionTimeWindowSec;
        }
        if (schedule !== undefined) {
            this.schedule = schedule;
        }
        if (defaultDeviceType !== undefined) {
            this.defaultDeviceType = defaultDeviceType;
        }
        if (deviceCreationPolicy !== undefined) {
            this.deviceCreationPolicy = deviceCreationPolicy;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YUluZ2VzdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wdWxzZS1saWIvc3JjL2xpYi9lbnRpdGllcy9EYXRhSW5nZXN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLHdEQUF3RDtBQUN4RCxNQUFNLE9BQU8sYUFBYTtJQTZCckIsWUFBWSxRQUFpQixFQUFFLFVBQW1CLEVBQUUsYUFBd0IsRUFBRSxPQUFrQixFQUFFLGtCQUEyQixFQUFFLG9CQUE2QixFQUFFLFFBQWlCLEVBQUUsaUJBQWtDLEVBQUUsb0JBQXlDO1FBQzNQLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQUU7UUFDekQsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7U0FBRTtRQUMvRCxJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztTQUFFO1FBQ3hFLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQUU7UUFDdEQsSUFBSSxrQkFBa0IsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7U0FBRTtRQUN2RixJQUFJLG9CQUFvQixLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztTQUFFO1FBQzdGLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQUU7UUFDekQsSUFBSSxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7U0FBRTtRQUNwRixJQUFJLG9CQUFvQixLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztTQUFFO0lBQ2pHLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERldmljZVR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvRGV2aWNlVHlwZUNvZGUnO1xuaW1wb3J0IHsgRGV2aWNlQ3JlYXRpb25Db2RlIH0gZnJvbSAnLi4vZW51bXMvRGV2aWNlQ3JlYXRpb25Db2RlJztcblxuXG5cbi8vIERhdGFJbmdlc3Rpb24gaXMgdGhlIGluZ2VzdGlvbiBwaXBlbGluZSBjb25maWd1cmF0aW9uXG5leHBvcnQgY2xhc3MgRGF0YUluZ2VzdGlvbiB7XG4gXG4gICAgLy8gSW5wdXQgZmlsZXMgbG9jYXRpb25zIFxuICAgIHB1YmxpYyBpbnB1dFVSSTogc3RyaW5nO1xuIFxuICAgIC8vIFdoZXJlIHRvIGFyY2hpdmUgcHJvY2Vzc2VkIGZpbGVzIFxuICAgIHB1YmxpYyBhcmNoaXZlVVJJOiBzdHJpbmc7XG4gXG4gICAgLy8gSW5wdXQgZmlsZXMgZXh0ZW5zaW9ucyAoZmlsdGVyIGJ5IGV4dGVuc2lvbnMpIC0gaWdub3JlIGlmIGVtcHR5IFxuICAgIHB1YmxpYyBpbnB1dEZpbGVzRXh0OiBzdHJpbmdbXTtcbiBcbiAgICAvLyBMaXN0IG9mIElvVCBkZXZpY2VzIHN1Ym5ldHMgLSBpZ25vcmUgaWYgZW1wdHkgXG4gICAgcHVibGljIHN1Yk5ldHM6IHN0cmluZ1tdO1xuIFxuICAgIC8vIFVzYWdlIHRpbWUgd2luZG93IGZvciBhZ2dyZWdhdGlvbiAoaW4gc2Vjb25kcykgXG4gICAgcHVibGljIHVzYWdlVGltZVdpbmRvd1NlYzogbnVtYmVyO1xuIFxuICAgIC8vIFNlc3Npb24gdGltZSB3aW5kb3cgZm9yIGFnZ3JlZ2F0aW9uIChpbiBzZWNvbmRzKSBcbiAgICBwdWJsaWMgc2Vzc2lvblRpbWVXaW5kb3dTZWM6IG51bWJlcjtcbiBcbiAgICAvLyBDcm9uIHNjaGVkdWxlIHRlbXBsYXRlIGluIDYgc2VnbWVudCBmb3JtYXQgKHNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3JvbikgLSBsZWF2ZSBlbXB0eSBmb3IgaW1tZWRpYXRlIHByb2Nlc3NpbmcgXG4gICAgcHVibGljIHNjaGVkdWxlOiBzdHJpbmc7XG4gXG4gICAgLy8gRGVmYXVsdCBkZXZpY2UgdHlwZTogVU5ERUZJTkVEIHwgT1RIRVIgfCBDT05UUk9MTEVSIHwgTUVURVIgfCBTRU5TT1IgLi4uIFxuICAgIHB1YmxpYyBkZWZhdWx0RGV2aWNlVHlwZTogRGV2aWNlVHlwZUNvZGU7XG4gXG4gICAgLy8gRGV2aWNlIGNyZWF0aW9uIHBvbGljeSBiYXNlZCBvbiB0aGUgUENQIHBhcnNpbmcgKE5PTkUgfCBJUCB8IFNJRCB8IEVJRCkgXG4gICAgcHVibGljIGRldmljZUNyZWF0aW9uUG9saWN5OiBEZXZpY2VDcmVhdGlvbkNvZGU7XG4gXG4gICAgIGNvbnN0cnVjdG9yKGlucHV0VVJJPzogc3RyaW5nLCBhcmNoaXZlVVJJPzogc3RyaW5nLCBpbnB1dEZpbGVzRXh0Pzogc3RyaW5nW10sIHN1Yk5ldHM/OiBzdHJpbmdbXSwgdXNhZ2VUaW1lV2luZG93U2VjPzogbnVtYmVyLCBzZXNzaW9uVGltZVdpbmRvd1NlYz86IG51bWJlciwgc2NoZWR1bGU/OiBzdHJpbmcsIGRlZmF1bHREZXZpY2VUeXBlPzogRGV2aWNlVHlwZUNvZGUsIGRldmljZUNyZWF0aW9uUG9saWN5PzogRGV2aWNlQ3JlYXRpb25Db2RlKSB7IFxuICAgICAgICBpZiAoaW5wdXRVUkkgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmlucHV0VVJJID0gaW5wdXRVUkk7IH1cbiAgICAgICAgaWYgKGFyY2hpdmVVUkkgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmFyY2hpdmVVUkkgPSBhcmNoaXZlVVJJOyB9XG4gICAgICAgIGlmIChpbnB1dEZpbGVzRXh0ICE9PSB1bmRlZmluZWQpIHsgdGhpcy5pbnB1dEZpbGVzRXh0ID0gaW5wdXRGaWxlc0V4dDsgfVxuICAgICAgICBpZiAoc3ViTmV0cyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc3ViTmV0cyA9IHN1Yk5ldHM7IH1cbiAgICAgICAgaWYgKHVzYWdlVGltZVdpbmRvd1NlYyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMudXNhZ2VUaW1lV2luZG93U2VjID0gdXNhZ2VUaW1lV2luZG93U2VjOyB9XG4gICAgICAgIGlmIChzZXNzaW9uVGltZVdpbmRvd1NlYyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc2Vzc2lvblRpbWVXaW5kb3dTZWMgPSBzZXNzaW9uVGltZVdpbmRvd1NlYzsgfVxuICAgICAgICBpZiAoc2NoZWR1bGUgIT09IHVuZGVmaW5lZCkgeyB0aGlzLnNjaGVkdWxlID0gc2NoZWR1bGU7IH1cbiAgICAgICAgaWYgKGRlZmF1bHREZXZpY2VUeXBlICE9PSB1bmRlZmluZWQpIHsgdGhpcy5kZWZhdWx0RGV2aWNlVHlwZSA9IGRlZmF1bHREZXZpY2VUeXBlOyB9XG4gICAgICAgIGlmIChkZXZpY2VDcmVhdGlvblBvbGljeSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuZGV2aWNlQ3JlYXRpb25Qb2xpY3kgPSBkZXZpY2VDcmVhdGlvblBvbGljeTsgfVxuICAgIH1cblxufVxuXG5cbiJdfQ==