// DataIngestion is the ingestion pipeline configuration
export class DataIngestion {
    constructor(inputURI, archiveURI, inputFilesExt, subNets, exclude, usageTimeWindowSec, sessionTimeWindowSec, schedule, defaultDeviceType, deviceCreationPolicy) {
        if (inputURI !== undefined) {
            this.inputURI = inputURI;
        }
        if (archiveURI !== undefined) {
            this.archiveURI = archiveURI;
        }
        if (inputFilesExt !== undefined) {
            this.inputFilesExt = inputFilesExt;
        }
        if (subNets !== undefined) {
            this.subNets = subNets;
        }
        if (exclude !== undefined) {
            this.exclude = exclude;
        }
        if (usageTimeWindowSec !== undefined) {
            this.usageTimeWindowSec = usageTimeWindowSec;
        }
        if (sessionTimeWindowSec !== undefined) {
            this.sessionTimeWindowSec = sessionTimeWindowSec;
        }
        if (schedule !== undefined) {
            this.schedule = schedule;
        }
        if (defaultDeviceType !== undefined) {
            this.defaultDeviceType = defaultDeviceType;
        }
        if (deviceCreationPolicy !== undefined) {
            this.deviceCreationPolicy = deviceCreationPolicy;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YUluZ2VzdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wdWxzZS1saWIvc3JjL2xpYi9lbnRpdGllcy9EYXRhSW5nZXN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLHdEQUF3RDtBQUN4RCxNQUFNLE9BQU8sYUFBYTtJQWdDckIsWUFBWSxRQUFpQixFQUFFLFVBQW1CLEVBQUUsYUFBd0IsRUFBRSxPQUFrQixFQUFFLE9BQWtCLEVBQUUsa0JBQTJCLEVBQUUsb0JBQTZCLEVBQUUsUUFBaUIsRUFBRSxpQkFBa0MsRUFBRSxvQkFBeUM7UUFDL1EsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FBRTtRQUN6RCxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztTQUFFO1FBQy9ELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1NBQUU7UUFDeEUsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FBRTtRQUN0RCxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztTQUFFO1FBQ3RELElBQUksa0JBQWtCLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO1NBQUU7UUFDdkYsSUFBSSxvQkFBb0IsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7U0FBRTtRQUM3RixJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUFFO1FBQ3pELElBQUksaUJBQWlCLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1NBQUU7UUFDcEYsSUFBSSxvQkFBb0IsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7U0FBRTtJQUNqRyxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZXZpY2VDcmVhdGlvbkNvZGUgfSBmcm9tICcuLi9lbnVtcy9EZXZpY2VDcmVhdGlvbkNvZGUnO1xuaW1wb3J0IHsgRGV2aWNlVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9EZXZpY2VUeXBlQ29kZSc7XG5cblxuXG4vLyBEYXRhSW5nZXN0aW9uIGlzIHRoZSBpbmdlc3Rpb24gcGlwZWxpbmUgY29uZmlndXJhdGlvblxuZXhwb3J0IGNsYXNzIERhdGFJbmdlc3Rpb24ge1xuIFxuICAgIC8vIElucHV0IGZpbGVzIGxvY2F0aW9ucyBcbiAgICBwdWJsaWMgaW5wdXRVUkk6IHN0cmluZztcbiBcbiAgICAvLyBXaGVyZSB0byBhcmNoaXZlIHByb2Nlc3NlZCBmaWxlcyBcbiAgICBwdWJsaWMgYXJjaGl2ZVVSSTogc3RyaW5nO1xuIFxuICAgIC8vIElucHV0IGZpbGVzIGV4dGVuc2lvbnMgKGZpbHRlciBieSBleHRlbnNpb25zKSAtIGlnbm9yZSBpZiBlbXB0eSBcbiAgICBwdWJsaWMgaW5wdXRGaWxlc0V4dDogc3RyaW5nW107XG4gXG4gICAgLy8gTGlzdCBvZiBJb1QgZGV2aWNlcyBzdWJuZXRzIC0gaWdub3JlIGlmIGVtcHR5IFxuICAgIHB1YmxpYyBzdWJOZXRzOiBzdHJpbmdbXTtcbiBcbiAgICAvLyBMaXN0IG9mIHN1Ym5ldHMgb3IgSVBzIHRvIGV4Y2x1ZGUgXG4gICAgcHVibGljIGV4Y2x1ZGU6IHN0cmluZ1tdO1xuIFxuICAgIC8vIFVzYWdlIHRpbWUgd2luZG93IGZvciBhZ2dyZWdhdGlvbiAoaW4gc2Vjb25kcykgXG4gICAgcHVibGljIHVzYWdlVGltZVdpbmRvd1NlYzogbnVtYmVyO1xuIFxuICAgIC8vIFNlc3Npb24gdGltZSB3aW5kb3cgZm9yIGFnZ3JlZ2F0aW9uIChpbiBzZWNvbmRzKSBcbiAgICBwdWJsaWMgc2Vzc2lvblRpbWVXaW5kb3dTZWM6IG51bWJlcjtcbiBcbiAgICAvLyBDcm9uIHNjaGVkdWxlIHRlbXBsYXRlIGluIDYgc2VnbWVudCBmb3JtYXQgKHNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3JvbikgLSBsZWF2ZSBlbXB0eSBmb3IgaW1tZWRpYXRlIHByb2Nlc3NpbmcgXG4gICAgcHVibGljIHNjaGVkdWxlOiBzdHJpbmc7XG4gXG4gICAgLy8gRGVmYXVsdCBkZXZpY2UgdHlwZTogVU5ERUZJTkVEIHwgT1RIRVIgfCBDT05UUk9MTEVSIHwgTUVURVIgfCBTRU5TT1IgLi4uIFxuICAgIHB1YmxpYyBkZWZhdWx0RGV2aWNlVHlwZTogRGV2aWNlVHlwZUNvZGU7XG4gXG4gICAgLy8gRGV2aWNlIGNyZWF0aW9uIHBvbGljeSBiYXNlZCBvbiB0aGUgUENQIHBhcnNpbmcgKE5PTkUgfCBJUCB8IFNJRCB8IEVJRCkgXG4gICAgcHVibGljIGRldmljZUNyZWF0aW9uUG9saWN5OiBEZXZpY2VDcmVhdGlvbkNvZGU7XG4gXG4gICAgIGNvbnN0cnVjdG9yKGlucHV0VVJJPzogc3RyaW5nLCBhcmNoaXZlVVJJPzogc3RyaW5nLCBpbnB1dEZpbGVzRXh0Pzogc3RyaW5nW10sIHN1Yk5ldHM/OiBzdHJpbmdbXSwgZXhjbHVkZT86IHN0cmluZ1tdLCB1c2FnZVRpbWVXaW5kb3dTZWM/OiBudW1iZXIsIHNlc3Npb25UaW1lV2luZG93U2VjPzogbnVtYmVyLCBzY2hlZHVsZT86IHN0cmluZywgZGVmYXVsdERldmljZVR5cGU/OiBEZXZpY2VUeXBlQ29kZSwgZGV2aWNlQ3JlYXRpb25Qb2xpY3k/OiBEZXZpY2VDcmVhdGlvbkNvZGUpIHsgXG4gICAgICAgIGlmIChpbnB1dFVSSSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuaW5wdXRVUkkgPSBpbnB1dFVSSTsgfVxuICAgICAgICBpZiAoYXJjaGl2ZVVSSSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuYXJjaGl2ZVVSSSA9IGFyY2hpdmVVUkk7IH1cbiAgICAgICAgaWYgKGlucHV0RmlsZXNFeHQgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmlucHV0RmlsZXNFeHQgPSBpbnB1dEZpbGVzRXh0OyB9XG4gICAgICAgIGlmIChzdWJOZXRzICE9PSB1bmRlZmluZWQpIHsgdGhpcy5zdWJOZXRzID0gc3ViTmV0czsgfVxuICAgICAgICBpZiAoZXhjbHVkZSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuZXhjbHVkZSA9IGV4Y2x1ZGU7IH1cbiAgICAgICAgaWYgKHVzYWdlVGltZVdpbmRvd1NlYyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMudXNhZ2VUaW1lV2luZG93U2VjID0gdXNhZ2VUaW1lV2luZG93U2VjOyB9XG4gICAgICAgIGlmIChzZXNzaW9uVGltZVdpbmRvd1NlYyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc2Vzc2lvblRpbWVXaW5kb3dTZWMgPSBzZXNzaW9uVGltZVdpbmRvd1NlYzsgfVxuICAgICAgICBpZiAoc2NoZWR1bGUgIT09IHVuZGVmaW5lZCkgeyB0aGlzLnNjaGVkdWxlID0gc2NoZWR1bGU7IH1cbiAgICAgICAgaWYgKGRlZmF1bHREZXZpY2VUeXBlICE9PSB1bmRlZmluZWQpIHsgdGhpcy5kZWZhdWx0RGV2aWNlVHlwZSA9IGRlZmF1bHREZXZpY2VUeXBlOyB9XG4gICAgICAgIGlmIChkZXZpY2VDcmVhdGlvblBvbGljeSAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuZGV2aWNlQ3JlYXRpb25Qb2xpY3kgPSBkZXZpY2VDcmVhdGlvblBvbGljeTsgfVxuICAgIH1cblxufVxuXG5cbiJdfQ==