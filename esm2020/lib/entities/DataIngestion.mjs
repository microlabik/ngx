// DataIngestion is the ingestion pipeline configuration
export class DataIngestion {
    constructor(inputURI, archiveURI, inputFilesExt, subNets, usageTimeWindowSec, sessionTimeWindowSec, schedule, defaultDeviceType, isStaticIPs) {
        if (inputURI !== undefined) {
            this.inputURI = inputURI;
        }
        if (archiveURI !== undefined) {
            this.archiveURI = archiveURI;
        }
        if (inputFilesExt !== undefined) {
            this.inputFilesExt = inputFilesExt;
        }
        if (subNets !== undefined) {
            this.subNets = subNets;
        }
        if (usageTimeWindowSec !== undefined) {
            this.usageTimeWindowSec = usageTimeWindowSec;
        }
        if (sessionTimeWindowSec !== undefined) {
            this.sessionTimeWindowSec = sessionTimeWindowSec;
        }
        if (schedule !== undefined) {
            this.schedule = schedule;
        }
        if (defaultDeviceType !== undefined) {
            this.defaultDeviceType = defaultDeviceType;
        }
        if (isStaticIPs !== undefined) {
            this.isStaticIPs = isStaticIPs;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YUluZ2VzdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wdWxzZS1saWIvc3JjL2xpYi9lbnRpdGllcy9EYXRhSW5nZXN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLHdEQUF3RDtBQUN4RCxNQUFNLE9BQU8sYUFBYTtJQTZCckIsWUFBWSxRQUFpQixFQUFFLFVBQW1CLEVBQUUsYUFBd0IsRUFBRSxPQUFrQixFQUFFLGtCQUEyQixFQUFFLG9CQUE2QixFQUFFLFFBQWlCLEVBQUUsaUJBQWtDLEVBQUUsV0FBcUI7UUFDdk8sSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FBRTtRQUN6RCxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztTQUFFO1FBQy9ELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1NBQUU7UUFDeEUsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FBRTtRQUN0RCxJQUFJLGtCQUFrQixLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztTQUFFO1FBQ3ZGLElBQUksb0JBQW9CLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1NBQUU7UUFDN0YsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FBRTtRQUN6RCxJQUFJLGlCQUFpQixLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztTQUFFO1FBQ3BGLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1NBQUU7SUFDdEUsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGV2aWNlVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9EZXZpY2VUeXBlQ29kZSc7XG5cblxuXG4vLyBEYXRhSW5nZXN0aW9uIGlzIHRoZSBpbmdlc3Rpb24gcGlwZWxpbmUgY29uZmlndXJhdGlvblxuZXhwb3J0IGNsYXNzIERhdGFJbmdlc3Rpb24ge1xuIFxuICAgIC8vIElucHV0IGZpbGVzIGxvY2F0aW9ucyBcbiAgICBwdWJsaWMgaW5wdXRVUkk6IHN0cmluZztcbiBcbiAgICAvLyBXaGVyZSB0byBhcmNoaXZlIHByb2Nlc3NlZCBmaWxlcyBcbiAgICBwdWJsaWMgYXJjaGl2ZVVSSTogc3RyaW5nO1xuIFxuICAgIC8vIElucHV0IGZpbGVzIGV4dGVuc2lvbnMgKGZpbHRlciBieSBleHRlbnNpb25zKSAtIGlnbm9yZSBpZiBlbXB0eSBcbiAgICBwdWJsaWMgaW5wdXRGaWxlc0V4dDogc3RyaW5nW107XG4gXG4gICAgLy8gTGlzdCBvZiBJb1QgZGV2aWNlcyBzdWJuZXRzIC0gaWdub3JlIGlmIGVtcHR5IFxuICAgIHB1YmxpYyBzdWJOZXRzOiBzdHJpbmdbXTtcbiBcbiAgICAvLyBVc2FnZSB0aW1lIHdpbmRvdyBmb3IgYWdncmVnYXRpb24gKGluIHNlY29uZHMpIFxuICAgIHB1YmxpYyB1c2FnZVRpbWVXaW5kb3dTZWM6IG51bWJlcjtcbiBcbiAgICAvLyBTZXNzaW9uIHRpbWUgd2luZG93IGZvciBhZ2dyZWdhdGlvbiAoaW4gc2Vjb25kcykgXG4gICAgcHVibGljIHNlc3Npb25UaW1lV2luZG93U2VjOiBudW1iZXI7XG4gXG4gICAgLy8gQ3JvbiBzY2hlZHVsZSB0ZW1wbGF0ZSBpbiA2IHNlZ21lbnQgZm9ybWF0IChzZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb24pIC0gbGVhdmUgZW1wdHkgZm9yIGltbWVkaWF0ZSBwcm9jZXNzaW5nIFxuICAgIHB1YmxpYyBzY2hlZHVsZTogc3RyaW5nO1xuIFxuICAgIC8vIERlZmF1bHQgZGV2aWNlIHR5cGU6IFVOREVGSU5FRCB8IE9USEVSIHwgQ09OVFJPTExFUiB8IE1FVEVSIHwgU0VOU09SIC4uLiBcbiAgICBwdWJsaWMgZGVmYXVsdERldmljZVR5cGU6IERldmljZVR5cGVDb2RlO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgdGhpcyBzdHJlYW0gZGF0YSBjb250YWlucyBzdGF0aWMgSVBzIFxuICAgIHB1YmxpYyBpc1N0YXRpY0lQczogYm9vbGVhbjtcbiBcbiAgICAgY29uc3RydWN0b3IoaW5wdXRVUkk/OiBzdHJpbmcsIGFyY2hpdmVVUkk/OiBzdHJpbmcsIGlucHV0RmlsZXNFeHQ/OiBzdHJpbmdbXSwgc3ViTmV0cz86IHN0cmluZ1tdLCB1c2FnZVRpbWVXaW5kb3dTZWM/OiBudW1iZXIsIHNlc3Npb25UaW1lV2luZG93U2VjPzogbnVtYmVyLCBzY2hlZHVsZT86IHN0cmluZywgZGVmYXVsdERldmljZVR5cGU/OiBEZXZpY2VUeXBlQ29kZSwgaXNTdGF0aWNJUHM/OiBib29sZWFuKSB7IFxuICAgICAgICBpZiAoaW5wdXRVUkkgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmlucHV0VVJJID0gaW5wdXRVUkk7IH1cbiAgICAgICAgaWYgKGFyY2hpdmVVUkkgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmFyY2hpdmVVUkkgPSBhcmNoaXZlVVJJOyB9XG4gICAgICAgIGlmIChpbnB1dEZpbGVzRXh0ICE9PSB1bmRlZmluZWQpIHsgdGhpcy5pbnB1dEZpbGVzRXh0ID0gaW5wdXRGaWxlc0V4dDsgfVxuICAgICAgICBpZiAoc3ViTmV0cyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc3ViTmV0cyA9IHN1Yk5ldHM7IH1cbiAgICAgICAgaWYgKHVzYWdlVGltZVdpbmRvd1NlYyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMudXNhZ2VUaW1lV2luZG93U2VjID0gdXNhZ2VUaW1lV2luZG93U2VjOyB9XG4gICAgICAgIGlmIChzZXNzaW9uVGltZVdpbmRvd1NlYyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuc2Vzc2lvblRpbWVXaW5kb3dTZWMgPSBzZXNzaW9uVGltZVdpbmRvd1NlYzsgfVxuICAgICAgICBpZiAoc2NoZWR1bGUgIT09IHVuZGVmaW5lZCkgeyB0aGlzLnNjaGVkdWxlID0gc2NoZWR1bGU7IH1cbiAgICAgICAgaWYgKGRlZmF1bHREZXZpY2VUeXBlICE9PSB1bmRlZmluZWQpIHsgdGhpcy5kZWZhdWx0RGV2aWNlVHlwZSA9IGRlZmF1bHREZXZpY2VUeXBlOyB9XG4gICAgICAgIGlmIChpc1N0YXRpY0lQcyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuaXNTdGF0aWNJUHMgPSBpc1N0YXRpY0lQczsgfVxuICAgIH1cblxufVxuXG5cbiJdfQ==