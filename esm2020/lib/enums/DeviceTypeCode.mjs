// Device type code
export var DeviceTypeCode;
(function (DeviceTypeCode) {
    // Undefined [0] 
    DeviceTypeCode[DeviceTypeCode["UNDEFINED"] = 0] = "UNDEFINED";
    // Other (Unknown Device) [1] 
    DeviceTypeCode[DeviceTypeCode["OTHER"] = 1] = "OTHER";
    // Industrial Controller [1] 
    DeviceTypeCode[DeviceTypeCode["CONTROLLER"] = 2] = "CONTROLLER";
    // General smart meter [2] 
    DeviceTypeCode[DeviceTypeCode["METER"] = 3] = "METER";
    // General sensor [3] 
    DeviceTypeCode[DeviceTypeCode["SENSOR"] = 4] = "SENSOR";
    // General camera [4] 
    DeviceTypeCode[DeviceTypeCode["CAMERA"] = 5] = "CAMERA";
    // Point of sale [5] 
    DeviceTypeCode[DeviceTypeCode["POS"] = 6] = "POS";
    // Pump [6] 
    DeviceTypeCode[DeviceTypeCode["PUMP"] = 7] = "PUMP";
    // EV charging station [7] 
    DeviceTypeCode[DeviceTypeCode["CHARGING_STATION"] = 8] = "CHARGING_STATION";
    // Smart lightning [8] 
    DeviceTypeCode[DeviceTypeCode["LIGHTNING"] = 9] = "LIGHTNING";
    // Temperature sensor [9] 
    DeviceTypeCode[DeviceTypeCode["TEMPERATURE_SENSOR"] = 10] = "TEMPERATURE_SENSOR";
    // Air Quality sensor [10] 
    DeviceTypeCode[DeviceTypeCode["AIR_QUALITY_SENSOR"] = 11] = "AIR_QUALITY_SENSOR";
    // Valve [11] 
    DeviceTypeCode[DeviceTypeCode["VALVE"] = 12] = "VALVE";
    // Gateway [12] 
    DeviceTypeCode[DeviceTypeCode["GATEWAY"] = 13] = "GATEWAY";
})(DeviceTypeCode || (DeviceTypeCode = {}));
// Return list of DeviceTypeCode values and their display names
export function GetDeviceTypeCodes() {
    let result = new Map();
    result.set(DeviceTypeCode.UNDEFINED, 'Undefined');
    result.set(DeviceTypeCode.OTHER, 'Other');
    result.set(DeviceTypeCode.CONTROLLER, 'Controller');
    result.set(DeviceTypeCode.METER, 'Meter');
    result.set(DeviceTypeCode.SENSOR, 'Sensor');
    result.set(DeviceTypeCode.CAMERA, 'Camera');
    result.set(DeviceTypeCode.POS, 'Pos');
    result.set(DeviceTypeCode.PUMP, 'Pump');
    result.set(DeviceTypeCode.CHARGING_STATION, 'Charging Station');
    result.set(DeviceTypeCode.LIGHTNING, 'Lightning');
    result.set(DeviceTypeCode.TEMPERATURE_SENSOR, 'Temperature Sensor');
    result.set(DeviceTypeCode.AIR_QUALITY_SENSOR, 'Air Quality Sensor');
    result.set(DeviceTypeCode.VALVE, 'Valve');
    result.set(DeviceTypeCode.GATEWAY, 'Gateway');
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlVHlwZUNvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcHVsc2UtbGliL3NyYy9saWIvZW51bXMvRGV2aWNlVHlwZUNvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsbUJBQW1CO0FBQ25CLE1BQU0sQ0FBTixJQUFZLGNBNENYO0FBNUNELFdBQVksY0FBYztJQUV0QixpQkFBaUI7SUFDakIsNkRBQWEsQ0FBQTtJQUViLDhCQUE4QjtJQUM5QixxREFBUyxDQUFBO0lBRVQsNkJBQTZCO0lBQzdCLCtEQUFjLENBQUE7SUFFZCwyQkFBMkI7SUFDM0IscURBQVMsQ0FBQTtJQUVULHNCQUFzQjtJQUN0Qix1REFBVSxDQUFBO0lBRVYsc0JBQXNCO0lBQ3RCLHVEQUFVLENBQUE7SUFFVixxQkFBcUI7SUFDckIsaURBQU8sQ0FBQTtJQUVQLFlBQVk7SUFDWixtREFBUSxDQUFBO0lBRVIsMkJBQTJCO0lBQzNCLDJFQUFvQixDQUFBO0lBRXBCLHVCQUF1QjtJQUN2Qiw2REFBYSxDQUFBO0lBRWIsMEJBQTBCO0lBQzFCLGdGQUF1QixDQUFBO0lBRXZCLDJCQUEyQjtJQUMzQixnRkFBdUIsQ0FBQTtJQUV2QixjQUFjO0lBQ2Qsc0RBQVUsQ0FBQTtJQUVWLGdCQUFnQjtJQUNoQiwwREFBWSxDQUFBO0FBRWhCLENBQUMsRUE1Q1csY0FBYyxLQUFkLGNBQWMsUUE0Q3pCO0FBRUQsK0RBQStEO0FBQy9ELE1BQU0sVUFBVSxrQkFBa0I7SUFFOUIsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQTBCLENBQUM7SUFHL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRWxELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUUxQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU1QyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXRDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUV4QyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBRWhFLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVsRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBRXBFLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGtCQUFrQixFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFFcEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUc5QyxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBEZXZpY2UgdHlwZSBjb2RlXG5leHBvcnQgZW51bSBEZXZpY2VUeXBlQ29kZSB7XG4gXG4gICAgLy8gVW5kZWZpbmVkIFswXSBcbiAgICBVTkRFRklORUQgPSAwLFxuIFxuICAgIC8vIE90aGVyIChVbmtub3duIERldmljZSkgWzFdIFxuICAgIE9USEVSID0gMSxcbiBcbiAgICAvLyBJbmR1c3RyaWFsIENvbnRyb2xsZXIgWzFdIFxuICAgIENPTlRST0xMRVIgPSAyLFxuIFxuICAgIC8vIEdlbmVyYWwgc21hcnQgbWV0ZXIgWzJdIFxuICAgIE1FVEVSID0gMyxcbiBcbiAgICAvLyBHZW5lcmFsIHNlbnNvciBbM10gXG4gICAgU0VOU09SID0gNCxcbiBcbiAgICAvLyBHZW5lcmFsIGNhbWVyYSBbNF0gXG4gICAgQ0FNRVJBID0gNSxcbiBcbiAgICAvLyBQb2ludCBvZiBzYWxlIFs1XSBcbiAgICBQT1MgPSA2LFxuIFxuICAgIC8vIFB1bXAgWzZdIFxuICAgIFBVTVAgPSA3LFxuIFxuICAgIC8vIEVWIGNoYXJnaW5nIHN0YXRpb24gWzddIFxuICAgIENIQVJHSU5HX1NUQVRJT04gPSA4LFxuIFxuICAgIC8vIFNtYXJ0IGxpZ2h0bmluZyBbOF0gXG4gICAgTElHSFROSU5HID0gOSxcbiBcbiAgICAvLyBUZW1wZXJhdHVyZSBzZW5zb3IgWzldIFxuICAgIFRFTVBFUkFUVVJFX1NFTlNPUiA9IDEwLFxuIFxuICAgIC8vIEFpciBRdWFsaXR5IHNlbnNvciBbMTBdIFxuICAgIEFJUl9RVUFMSVRZX1NFTlNPUiA9IDExLFxuIFxuICAgIC8vIFZhbHZlIFsxMV0gXG4gICAgVkFMVkUgPSAxMixcbiBcbiAgICAvLyBHYXRld2F5IFsxMl0gXG4gICAgR0FURVdBWSA9IDEzLFxuIFxufVxuXG4vLyBSZXR1cm4gbGlzdCBvZiBEZXZpY2VUeXBlQ29kZSB2YWx1ZXMgYW5kIHRoZWlyIGRpc3BsYXkgbmFtZXNcbmV4cG9ydCBmdW5jdGlvbiBHZXREZXZpY2VUeXBlQ29kZXMoKSA6IE1hcDxEZXZpY2VUeXBlQ29kZSwgc3RyaW5nPiB7XG5cbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcDxEZXZpY2VUeXBlQ29kZSwgc3RyaW5nPigpO1xuXG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VUeXBlQ29kZS5VTkRFRklORUQsICdVbmRlZmluZWQnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLk9USEVSLCAnT3RoZXInKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLkNPTlRST0xMRVIsICdDb250cm9sbGVyJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VUeXBlQ29kZS5NRVRFUiwgJ01ldGVyJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VUeXBlQ29kZS5TRU5TT1IsICdTZW5zb3InKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLkNBTUVSQSwgJ0NhbWVyYScpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlVHlwZUNvZGUuUE9TLCAnUG9zJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VUeXBlQ29kZS5QVU1QLCAnUHVtcCcpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlVHlwZUNvZGUuQ0hBUkdJTkdfU1RBVElPTiwgJ0NoYXJnaW5nIFN0YXRpb24nKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLkxJR0hUTklORywgJ0xpZ2h0bmluZycpO1xuICAgIFxuICAgIHJlc3VsdC5zZXQoRGV2aWNlVHlwZUNvZGUuVEVNUEVSQVRVUkVfU0VOU09SLCAnVGVtcGVyYXR1cmUgU2Vuc29yJyk7XG4gICAgXG4gICAgcmVzdWx0LnNldChEZXZpY2VUeXBlQ29kZS5BSVJfUVVBTElUWV9TRU5TT1IsICdBaXIgUXVhbGl0eSBTZW5zb3InKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLlZBTFZFLCAnVmFsdmUnKTtcbiAgICBcbiAgICByZXN1bHQuc2V0KERldmljZVR5cGVDb2RlLkdBVEVXQVksICdHYXRld2F5Jyk7XG4gICAgXG5cbiAgICByZXR1cm4gcmVzdWx0O1xufSJdfQ==